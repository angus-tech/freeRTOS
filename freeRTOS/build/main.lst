ARM GAS  /tmp/ccMv8ptN.s 			page 1


   1              		.cpu cortex-m3
   2              		.eabi_attribute 20, 1
   3              		.eabi_attribute 21, 1
   4              		.eabi_attribute 23, 3
   5              		.eabi_attribute 24, 1
   6              		.eabi_attribute 25, 1
   7              		.eabi_attribute 26, 1
   8              		.eabi_attribute 30, 1
   9              		.eabi_attribute 34, 1
  10              		.eabi_attribute 18, 4
  11              		.file	"main.c"
  12              		.section	.rodata.str1.4,"aMS",%progbits,1
  13              		.align	2
  14              	.LC0:
  15 0000 64656661 		.ascii	"defaultTask\000"
  15      756C7454 
  15      61736B00 
  16              		.text
  17              	.Ltext0:
  18              		.cfi_sections	.debug_frame
  19              		.section	.text.MX_GPIO_Init,"ax",%progbits
  20              		.align	1
  21              		.arch armv7-m
  22              		.syntax unified
  23              		.thumb
  24              		.thumb_func
  25              		.fpu softvfp
  27              	MX_GPIO_Init:
  28              	.LFB72:
  29              		.file 1 "Src/main.c"
   1:Src/main.c    **** /* USER CODE BEGIN Header */
   2:Src/main.c    **** /**
   3:Src/main.c    ****   ******************************************************************************
   4:Src/main.c    ****   * @file           : main.c
   5:Src/main.c    ****   * @brief          : Main program body
   6:Src/main.c    ****   ******************************************************************************
   7:Src/main.c    ****   * @attention
   8:Src/main.c    ****   *
   9:Src/main.c    ****   * <h2><center>&copy; Copyright (c) 2020 STMicroelectronics.
  10:Src/main.c    ****   * All rights reserved.</center></h2>
  11:Src/main.c    ****   *
  12:Src/main.c    ****   * This software component is licensed by ST under Ultimate Liberty license
  13:Src/main.c    ****   * SLA0044, the "License"; You may not use this file except in compliance with
  14:Src/main.c    ****   * the License. You may obtain a copy of the License at:
  15:Src/main.c    ****   *                             www.st.com/SLA0044
  16:Src/main.c    ****   *
  17:Src/main.c    ****   ******************************************************************************
  18:Src/main.c    ****   */
  19:Src/main.c    **** /* USER CODE END Header */
  20:Src/main.c    **** 
  21:Src/main.c    **** /* Includes ------------------------------------------------------------------*/
  22:Src/main.c    **** #include "main.h"
  23:Src/main.c    **** #include "cmsis_os.h"
  24:Src/main.c    **** 
  25:Src/main.c    **** /* Private includes ----------------------------------------------------------*/
  26:Src/main.c    **** /* USER CODE BEGIN Includes */
  27:Src/main.c    **** 
ARM GAS  /tmp/ccMv8ptN.s 			page 2


  28:Src/main.c    **** /* USER CODE END Includes */
  29:Src/main.c    **** 
  30:Src/main.c    **** /* Private typedef -----------------------------------------------------------*/
  31:Src/main.c    **** /* USER CODE BEGIN PTD */
  32:Src/main.c    **** 
  33:Src/main.c    **** /* USER CODE END PTD */
  34:Src/main.c    **** 
  35:Src/main.c    **** /* Private define ------------------------------------------------------------*/
  36:Src/main.c    **** /* USER CODE BEGIN PD */
  37:Src/main.c    **** /* USER CODE END PD */
  38:Src/main.c    **** 
  39:Src/main.c    **** /* Private macro -------------------------------------------------------------*/
  40:Src/main.c    **** /* USER CODE BEGIN PM */
  41:Src/main.c    **** 
  42:Src/main.c    **** /* USER CODE END PM */
  43:Src/main.c    **** 
  44:Src/main.c    **** /* Private variables ---------------------------------------------------------*/
  45:Src/main.c    **** osThreadId defaultTaskHandle;
  46:Src/main.c    **** /* USER CODE BEGIN PV */
  47:Src/main.c    **** 
  48:Src/main.c    **** /* USER CODE END PV */
  49:Src/main.c    **** 
  50:Src/main.c    **** /* Private function prototypes -----------------------------------------------*/
  51:Src/main.c    **** void SystemClock_Config(void);
  52:Src/main.c    **** static void MX_GPIO_Init(void);
  53:Src/main.c    **** void StartDefaultTask(void const * argument);
  54:Src/main.c    **** 
  55:Src/main.c    **** /* USER CODE BEGIN PFP */
  56:Src/main.c    **** 
  57:Src/main.c    **** /* USER CODE END PFP */
  58:Src/main.c    **** 
  59:Src/main.c    **** /* Private user code ---------------------------------------------------------*/
  60:Src/main.c    **** /* USER CODE BEGIN 0 */
  61:Src/main.c    **** 
  62:Src/main.c    **** /* USER CODE END 0 */
  63:Src/main.c    **** 
  64:Src/main.c    **** /**
  65:Src/main.c    ****   * @brief  The application entry point.
  66:Src/main.c    ****   * @retval int
  67:Src/main.c    ****   */
  68:Src/main.c    **** int main(void)
  69:Src/main.c    **** {
  70:Src/main.c    ****   /* USER CODE BEGIN 1 */
  71:Src/main.c    **** 
  72:Src/main.c    ****   /* USER CODE END 1 */
  73:Src/main.c    ****   
  74:Src/main.c    **** 
  75:Src/main.c    ****   /* MCU Configuration--------------------------------------------------------*/
  76:Src/main.c    **** 
  77:Src/main.c    ****   /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  78:Src/main.c    ****   HAL_Init();
  79:Src/main.c    **** 
  80:Src/main.c    ****   /* USER CODE BEGIN Init */
  81:Src/main.c    **** 
  82:Src/main.c    ****   /* USER CODE END Init */
  83:Src/main.c    **** 
  84:Src/main.c    ****   /* Configure the system clock */
ARM GAS  /tmp/ccMv8ptN.s 			page 3


  85:Src/main.c    ****   SystemClock_Config();
  86:Src/main.c    **** 
  87:Src/main.c    ****   /* USER CODE BEGIN SysInit */
  88:Src/main.c    **** 
  89:Src/main.c    ****   /* USER CODE END SysInit */
  90:Src/main.c    **** 
  91:Src/main.c    ****   /* Initialize all configured peripherals */
  92:Src/main.c    ****   MX_GPIO_Init();
  93:Src/main.c    ****   /* USER CODE BEGIN 2 */
  94:Src/main.c    **** 
  95:Src/main.c    ****   /* USER CODE END 2 */
  96:Src/main.c    **** 
  97:Src/main.c    ****   /* USER CODE BEGIN RTOS_MUTEX */
  98:Src/main.c    ****   /* add mutexes, ... */
  99:Src/main.c    ****   /* USER CODE END RTOS_MUTEX */
 100:Src/main.c    **** 
 101:Src/main.c    ****   /* USER CODE BEGIN RTOS_SEMAPHORES */
 102:Src/main.c    ****   /* add semaphores, ... */
 103:Src/main.c    ****   /* USER CODE END RTOS_SEMAPHORES */
 104:Src/main.c    **** 
 105:Src/main.c    ****   /* USER CODE BEGIN RTOS_TIMERS */
 106:Src/main.c    ****   /* start timers, add new ones, ... */
 107:Src/main.c    ****   /* USER CODE END RTOS_TIMERS */
 108:Src/main.c    **** 
 109:Src/main.c    ****   /* USER CODE BEGIN RTOS_QUEUES */
 110:Src/main.c    ****   /* add queues, ... */
 111:Src/main.c    ****   /* USER CODE END RTOS_QUEUES */
 112:Src/main.c    **** 
 113:Src/main.c    ****   /* Create the thread(s) */
 114:Src/main.c    ****   /* definition and creation of defaultTask */
 115:Src/main.c    ****   osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 116:Src/main.c    ****   defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 117:Src/main.c    **** 
 118:Src/main.c    ****   /* USER CODE BEGIN RTOS_THREADS */
 119:Src/main.c    ****   /* add threads, ... */
 120:Src/main.c    ****   /* USER CODE END RTOS_THREADS */
 121:Src/main.c    **** 
 122:Src/main.c    ****   /* Start scheduler */
 123:Src/main.c    ****   osKernelStart();
 124:Src/main.c    ****  
 125:Src/main.c    ****   /* We should never get here as control is now taken by the scheduler */
 126:Src/main.c    **** 
 127:Src/main.c    ****   /* Infinite loop */
 128:Src/main.c    ****   /* USER CODE BEGIN WHILE */
 129:Src/main.c    ****   while (1)
 130:Src/main.c    ****   {
 131:Src/main.c    ****     /* USER CODE END WHILE */
 132:Src/main.c    **** 
 133:Src/main.c    ****     /* USER CODE BEGIN 3 */
 134:Src/main.c    ****   }
 135:Src/main.c    ****   /* USER CODE END 3 */
 136:Src/main.c    **** }
 137:Src/main.c    **** 
 138:Src/main.c    **** /**
 139:Src/main.c    ****   * @brief System Clock Configuration
 140:Src/main.c    ****   * @retval None
 141:Src/main.c    ****   */
ARM GAS  /tmp/ccMv8ptN.s 			page 4


 142:Src/main.c    **** void SystemClock_Config(void)
 143:Src/main.c    **** {
 144:Src/main.c    ****   RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 145:Src/main.c    ****   RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 146:Src/main.c    **** 
 147:Src/main.c    ****   /** Initializes the CPU, AHB and APB busses clocks 
 148:Src/main.c    ****   */
 149:Src/main.c    ****   RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 150:Src/main.c    ****   RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 151:Src/main.c    ****   RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 152:Src/main.c    ****   RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 153:Src/main.c    ****   RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 154:Src/main.c    ****   RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 155:Src/main.c    ****   RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 156:Src/main.c    ****   if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 157:Src/main.c    ****   {
 158:Src/main.c    ****     Error_Handler();
 159:Src/main.c    ****   }
 160:Src/main.c    ****   /** Initializes the CPU, AHB and APB busses clocks 
 161:Src/main.c    ****   */
 162:Src/main.c    ****   RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 163:Src/main.c    ****                               |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
 164:Src/main.c    ****   RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 165:Src/main.c    ****   RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 166:Src/main.c    ****   RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 167:Src/main.c    ****   RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 168:Src/main.c    **** 
 169:Src/main.c    ****   if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 170:Src/main.c    ****   {
 171:Src/main.c    ****     Error_Handler();
 172:Src/main.c    ****   }
 173:Src/main.c    **** }
 174:Src/main.c    **** 
 175:Src/main.c    **** /**
 176:Src/main.c    ****   * @brief GPIO Initialization Function
 177:Src/main.c    ****   * @param None
 178:Src/main.c    ****   * @retval None
 179:Src/main.c    ****   */
 180:Src/main.c    **** static void MX_GPIO_Init(void)
 181:Src/main.c    **** {
  30              		.loc 1 181 1 view -0
  31              		.cfi_startproc
  32              		@ args = 0, pretend = 0, frame = 32
  33              		@ frame_needed = 0, uses_anonymous_args = 0
  34 0000 30B5     		push	{r4, r5, lr}
  35              	.LCFI0:
  36              		.cfi_def_cfa_offset 12
  37              		.cfi_offset 4, -12
  38              		.cfi_offset 5, -8
  39              		.cfi_offset 14, -4
  40 0002 89B0     		sub	sp, sp, #36
  41              	.LCFI1:
  42              		.cfi_def_cfa_offset 48
 182:Src/main.c    ****   GPIO_InitTypeDef GPIO_InitStruct = {0};
  43              		.loc 1 182 3 view .LVU1
  44              		.loc 1 182 20 is_stmt 0 view .LVU2
  45 0004 0024     		movs	r4, #0
ARM GAS  /tmp/ccMv8ptN.s 			page 5


  46 0006 0494     		str	r4, [sp, #16]
  47 0008 0594     		str	r4, [sp, #20]
  48 000a 0694     		str	r4, [sp, #24]
  49 000c 0794     		str	r4, [sp, #28]
 183:Src/main.c    **** 
 184:Src/main.c    ****   /* GPIO Ports Clock Enable */
 185:Src/main.c    ****   __HAL_RCC_GPIOC_CLK_ENABLE();
  50              		.loc 1 185 3 is_stmt 1 view .LVU3
  51              	.LBB2:
  52              		.loc 1 185 3 view .LVU4
  53              		.loc 1 185 3 view .LVU5
  54 000e 184B     		ldr	r3, .L3
  55 0010 9A69     		ldr	r2, [r3, #24]
  56 0012 42F01002 		orr	r2, r2, #16
  57 0016 9A61     		str	r2, [r3, #24]
  58              		.loc 1 185 3 view .LVU6
  59 0018 9A69     		ldr	r2, [r3, #24]
  60 001a 02F01002 		and	r2, r2, #16
  61 001e 0192     		str	r2, [sp, #4]
  62              		.loc 1 185 3 view .LVU7
  63 0020 019A     		ldr	r2, [sp, #4]
  64              	.LBE2:
  65              		.loc 1 185 3 view .LVU8
 186:Src/main.c    ****   __HAL_RCC_GPIOD_CLK_ENABLE();
  66              		.loc 1 186 3 view .LVU9
  67              	.LBB3:
  68              		.loc 1 186 3 view .LVU10
  69              		.loc 1 186 3 view .LVU11
  70 0022 9A69     		ldr	r2, [r3, #24]
  71 0024 42F02002 		orr	r2, r2, #32
  72 0028 9A61     		str	r2, [r3, #24]
  73              		.loc 1 186 3 view .LVU12
  74 002a 9A69     		ldr	r2, [r3, #24]
  75 002c 02F02002 		and	r2, r2, #32
  76 0030 0292     		str	r2, [sp, #8]
  77              		.loc 1 186 3 view .LVU13
  78 0032 029A     		ldr	r2, [sp, #8]
  79              	.LBE3:
  80              		.loc 1 186 3 view .LVU14
 187:Src/main.c    ****   __HAL_RCC_GPIOA_CLK_ENABLE();
  81              		.loc 1 187 3 view .LVU15
  82              	.LBB4:
  83              		.loc 1 187 3 view .LVU16
  84              		.loc 1 187 3 view .LVU17
  85 0034 9A69     		ldr	r2, [r3, #24]
  86 0036 42F00402 		orr	r2, r2, #4
  87 003a 9A61     		str	r2, [r3, #24]
  88              		.loc 1 187 3 view .LVU18
  89 003c 9B69     		ldr	r3, [r3, #24]
  90 003e 03F00403 		and	r3, r3, #4
  91 0042 0393     		str	r3, [sp, #12]
  92              		.loc 1 187 3 view .LVU19
  93 0044 039B     		ldr	r3, [sp, #12]
  94              	.LBE4:
  95              		.loc 1 187 3 view .LVU20
 188:Src/main.c    **** 
 189:Src/main.c    ****   /*Configure GPIO pin Output Level */
ARM GAS  /tmp/ccMv8ptN.s 			page 6


 190:Src/main.c    ****   HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
  96              		.loc 1 190 3 view .LVU21
  97 0046 0B4D     		ldr	r5, .L3+4
  98 0048 2246     		mov	r2, r4
  99 004a 4FF40051 		mov	r1, #8192
 100 004e 2846     		mov	r0, r5
 101 0050 FFF7FEFF 		bl	HAL_GPIO_WritePin
 102              	.LVL0:
 191:Src/main.c    **** 
 192:Src/main.c    ****   /*Configure GPIO pin : LED_Pin */
 193:Src/main.c    ****   GPIO_InitStruct.Pin = LED_Pin;
 103              		.loc 1 193 3 view .LVU22
 104              		.loc 1 193 23 is_stmt 0 view .LVU23
 105 0054 4FF40053 		mov	r3, #8192
 106 0058 0493     		str	r3, [sp, #16]
 194:Src/main.c    ****   GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 107              		.loc 1 194 3 is_stmt 1 view .LVU24
 108              		.loc 1 194 24 is_stmt 0 view .LVU25
 109 005a 0123     		movs	r3, #1
 110 005c 0593     		str	r3, [sp, #20]
 195:Src/main.c    ****   GPIO_InitStruct.Pull = GPIO_NOPULL;
 111              		.loc 1 195 3 is_stmt 1 view .LVU26
 112              		.loc 1 195 24 is_stmt 0 view .LVU27
 113 005e 0694     		str	r4, [sp, #24]
 196:Src/main.c    ****   GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 114              		.loc 1 196 3 is_stmt 1 view .LVU28
 115              		.loc 1 196 25 is_stmt 0 view .LVU29
 116 0060 0223     		movs	r3, #2
 117 0062 0793     		str	r3, [sp, #28]
 197:Src/main.c    ****   HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 118              		.loc 1 197 3 is_stmt 1 view .LVU30
 119 0064 04A9     		add	r1, sp, #16
 120 0066 2846     		mov	r0, r5
 121 0068 FFF7FEFF 		bl	HAL_GPIO_Init
 122              	.LVL1:
 198:Src/main.c    **** 
 199:Src/main.c    **** }
 123              		.loc 1 199 1 is_stmt 0 view .LVU31
 124 006c 09B0     		add	sp, sp, #36
 125              	.LCFI2:
 126              		.cfi_def_cfa_offset 12
 127              		@ sp needed
 128 006e 30BD     		pop	{r4, r5, pc}
 129              	.L4:
 130              		.align	2
 131              	.L3:
 132 0070 00100240 		.word	1073876992
 133 0074 00100140 		.word	1073811456
 134              		.cfi_endproc
 135              	.LFE72:
 137              		.section	.text.StartDefaultTask,"ax",%progbits
 138              		.align	1
 139              		.global	StartDefaultTask
 140              		.syntax unified
 141              		.thumb
 142              		.thumb_func
 143              		.fpu softvfp
ARM GAS  /tmp/ccMv8ptN.s 			page 7


 145              	StartDefaultTask:
 146              	.LFB73:
 200:Src/main.c    **** 
 201:Src/main.c    **** /* USER CODE BEGIN 4 */
 202:Src/main.c    **** 
 203:Src/main.c    **** /* USER CODE END 4 */
 204:Src/main.c    **** 
 205:Src/main.c    **** /* USER CODE BEGIN Header_StartDefaultTask */
 206:Src/main.c    **** /**
 207:Src/main.c    ****   * @brief  Function implementing the defaultTask thread.
 208:Src/main.c    ****   * @param  argument: Not used 
 209:Src/main.c    ****   * @retval None
 210:Src/main.c    ****   */
 211:Src/main.c    **** /* USER CODE END Header_StartDefaultTask */
 212:Src/main.c    **** void StartDefaultTask(void const * argument)
 213:Src/main.c    **** {
 147              		.loc 1 213 1 is_stmt 1 view -0
 148              		.cfi_startproc
 149              		@ Volatile: function does not return.
 150              		@ args = 0, pretend = 0, frame = 0
 151              		@ frame_needed = 0, uses_anonymous_args = 0
 152              	.LVL2:
 153              		.loc 1 213 1 is_stmt 0 view .LVU33
 154 0000 08B5     		push	{r3, lr}
 155              	.LCFI3:
 156              		.cfi_def_cfa_offset 8
 157              		.cfi_offset 3, -8
 158              		.cfi_offset 14, -4
 159              	.LVL3:
 160              	.L6:
 214:Src/main.c    ****   /* USER CODE BEGIN 5 */
 215:Src/main.c    ****   /* Infinite loop */
 216:Src/main.c    ****   for(;;)
 161              		.loc 1 216 3 is_stmt 1 discriminator 1 view .LVU34
 217:Src/main.c    ****   {
 218:Src/main.c    ****     osDelay(1);
 162              		.loc 1 218 5 discriminator 1 view .LVU35
 163 0002 0120     		movs	r0, #1
 164 0004 FFF7FEFF 		bl	osDelay
 165              	.LVL4:
 216:Src/main.c    ****   {
 166              		.loc 1 216 8 discriminator 1 view .LVU36
 167 0008 FBE7     		b	.L6
 168              		.cfi_endproc
 169              	.LFE73:
 171              		.section	.text.SystemClock_Config,"ax",%progbits
 172              		.align	1
 173              		.global	SystemClock_Config
 174              		.syntax unified
 175              		.thumb
 176              		.thumb_func
 177              		.fpu softvfp
 179              	SystemClock_Config:
 180              	.LFB71:
 143:Src/main.c    ****   RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 181              		.loc 1 143 1 view -0
 182              		.cfi_startproc
ARM GAS  /tmp/ccMv8ptN.s 			page 8


 183              		@ args = 0, pretend = 0, frame = 64
 184              		@ frame_needed = 0, uses_anonymous_args = 0
 185 0000 30B5     		push	{r4, r5, lr}
 186              	.LCFI4:
 187              		.cfi_def_cfa_offset 12
 188              		.cfi_offset 4, -12
 189              		.cfi_offset 5, -8
 190              		.cfi_offset 14, -4
 191 0002 91B0     		sub	sp, sp, #68
 192              	.LCFI5:
 193              		.cfi_def_cfa_offset 80
 144:Src/main.c    ****   RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 194              		.loc 1 144 3 view .LVU38
 144:Src/main.c    ****   RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 195              		.loc 1 144 22 is_stmt 0 view .LVU39
 196 0004 0024     		movs	r4, #0
 197 0006 0994     		str	r4, [sp, #36]
 198 0008 0B94     		str	r4, [sp, #44]
 199 000a 0C94     		str	r4, [sp, #48]
 145:Src/main.c    **** 
 200              		.loc 1 145 3 is_stmt 1 view .LVU40
 145:Src/main.c    **** 
 201              		.loc 1 145 22 is_stmt 0 view .LVU41
 202 000c 0194     		str	r4, [sp, #4]
 203 000e 0294     		str	r4, [sp, #8]
 204 0010 0394     		str	r4, [sp, #12]
 205 0012 0494     		str	r4, [sp, #16]
 206 0014 0594     		str	r4, [sp, #20]
 149:Src/main.c    ****   RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 207              		.loc 1 149 3 is_stmt 1 view .LVU42
 149:Src/main.c    ****   RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 208              		.loc 1 149 36 is_stmt 0 view .LVU43
 209 0016 0122     		movs	r2, #1
 210 0018 0692     		str	r2, [sp, #24]
 150:Src/main.c    ****   RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 211              		.loc 1 150 3 is_stmt 1 view .LVU44
 150:Src/main.c    ****   RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 212              		.loc 1 150 30 is_stmt 0 view .LVU45
 213 001a 4FF48033 		mov	r3, #65536
 214 001e 0793     		str	r3, [sp, #28]
 151:Src/main.c    ****   RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 215              		.loc 1 151 3 is_stmt 1 view .LVU46
 151:Src/main.c    ****   RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 216              		.loc 1 151 36 is_stmt 0 view .LVU47
 217 0020 0894     		str	r4, [sp, #32]
 152:Src/main.c    ****   RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 218              		.loc 1 152 3 is_stmt 1 view .LVU48
 152:Src/main.c    ****   RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 219              		.loc 1 152 30 is_stmt 0 view .LVU49
 220 0022 0A92     		str	r2, [sp, #40]
 153:Src/main.c    ****   RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 221              		.loc 1 153 3 is_stmt 1 view .LVU50
 153:Src/main.c    ****   RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 222              		.loc 1 153 34 is_stmt 0 view .LVU51
 223 0024 0225     		movs	r5, #2
 224 0026 0D95     		str	r5, [sp, #52]
 154:Src/main.c    ****   RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
ARM GAS  /tmp/ccMv8ptN.s 			page 9


 225              		.loc 1 154 3 is_stmt 1 view .LVU52
 154:Src/main.c    ****   RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 226              		.loc 1 154 35 is_stmt 0 view .LVU53
 227 0028 0E93     		str	r3, [sp, #56]
 155:Src/main.c    ****   if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 228              		.loc 1 155 3 is_stmt 1 view .LVU54
 155:Src/main.c    ****   if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 229              		.loc 1 155 32 is_stmt 0 view .LVU55
 230 002a 4FF4E013 		mov	r3, #1835008
 231 002e 0F93     		str	r3, [sp, #60]
 156:Src/main.c    ****   {
 232              		.loc 1 156 3 is_stmt 1 view .LVU56
 156:Src/main.c    ****   {
 233              		.loc 1 156 7 is_stmt 0 view .LVU57
 234 0030 06A8     		add	r0, sp, #24
 235 0032 FFF7FEFF 		bl	HAL_RCC_OscConfig
 236              	.LVL5:
 162:Src/main.c    ****                               |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
 237              		.loc 1 162 3 is_stmt 1 view .LVU58
 162:Src/main.c    ****                               |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
 238              		.loc 1 162 31 is_stmt 0 view .LVU59
 239 0036 0F23     		movs	r3, #15
 240 0038 0193     		str	r3, [sp, #4]
 164:Src/main.c    ****   RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 241              		.loc 1 164 3 is_stmt 1 view .LVU60
 164:Src/main.c    ****   RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 242              		.loc 1 164 34 is_stmt 0 view .LVU61
 243 003a 0295     		str	r5, [sp, #8]
 165:Src/main.c    ****   RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 244              		.loc 1 165 3 is_stmt 1 view .LVU62
 165:Src/main.c    ****   RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 245              		.loc 1 165 35 is_stmt 0 view .LVU63
 246 003c 0394     		str	r4, [sp, #12]
 166:Src/main.c    ****   RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 247              		.loc 1 166 3 is_stmt 1 view .LVU64
 166:Src/main.c    ****   RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 248              		.loc 1 166 36 is_stmt 0 view .LVU65
 249 003e 4FF48063 		mov	r3, #1024
 250 0042 0493     		str	r3, [sp, #16]
 167:Src/main.c    **** 
 251              		.loc 1 167 3 is_stmt 1 view .LVU66
 167:Src/main.c    **** 
 252              		.loc 1 167 36 is_stmt 0 view .LVU67
 253 0044 0594     		str	r4, [sp, #20]
 169:Src/main.c    ****   {
 254              		.loc 1 169 3 is_stmt 1 view .LVU68
 169:Src/main.c    ****   {
 255              		.loc 1 169 7 is_stmt 0 view .LVU69
 256 0046 2946     		mov	r1, r5
 257 0048 01A8     		add	r0, sp, #4
 258 004a FFF7FEFF 		bl	HAL_RCC_ClockConfig
 259              	.LVL6:
 173:Src/main.c    **** 
 260              		.loc 1 173 1 view .LVU70
 261 004e 11B0     		add	sp, sp, #68
 262              	.LCFI6:
 263              		.cfi_def_cfa_offset 12
ARM GAS  /tmp/ccMv8ptN.s 			page 10


 264              		@ sp needed
 265 0050 30BD     		pop	{r4, r5, pc}
 266              		.cfi_endproc
 267              	.LFE71:
 269              		.section	.text.main,"ax",%progbits
 270              		.align	1
 271              		.global	main
 272              		.syntax unified
 273              		.thumb
 274              		.thumb_func
 275              		.fpu softvfp
 277              	main:
 278              	.LFB70:
  69:Src/main.c    ****   /* USER CODE BEGIN 1 */
 279              		.loc 1 69 1 is_stmt 1 view -0
 280              		.cfi_startproc
 281              		@ Volatile: function does not return.
 282              		@ args = 0, pretend = 0, frame = 32
 283              		@ frame_needed = 0, uses_anonymous_args = 0
 284 0000 00B5     		push	{lr}
 285              	.LCFI7:
 286              		.cfi_def_cfa_offset 4
 287              		.cfi_offset 14, -4
 288 0002 89B0     		sub	sp, sp, #36
 289              	.LCFI8:
 290              		.cfi_def_cfa_offset 40
  78:Src/main.c    **** 
 291              		.loc 1 78 3 view .LVU72
 292 0004 FFF7FEFF 		bl	HAL_Init
 293              	.LVL7:
  85:Src/main.c    **** 
 294              		.loc 1 85 3 view .LVU73
 295 0008 FFF7FEFF 		bl	SystemClock_Config
 296              	.LVL8:
  92:Src/main.c    ****   /* USER CODE BEGIN 2 */
 297              		.loc 1 92 3 view .LVU74
 298 000c FFF7FEFF 		bl	MX_GPIO_Init
 299              	.LVL9:
 115:Src/main.c    ****   defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 300              		.loc 1 115 3 view .LVU75
 301 0010 01AC     		add	r4, sp, #4
 302 0012 084D     		ldr	r5, .L13
 303 0014 0FCD     		ldmia	r5!, {r0, r1, r2, r3}
 304 0016 0FC4     		stmia	r4!, {r0, r1, r2, r3}
 305 0018 95E80700 		ldm	r5, {r0, r1, r2}
 306 001c 84E80700 		stm	r4, {r0, r1, r2}
 116:Src/main.c    **** 
 307              		.loc 1 116 3 view .LVU76
 116:Src/main.c    **** 
 308              		.loc 1 116 23 is_stmt 0 view .LVU77
 309 0020 0021     		movs	r1, #0
 310 0022 01A8     		add	r0, sp, #4
 311 0024 FFF7FEFF 		bl	osThreadCreate
 312              	.LVL10:
 116:Src/main.c    **** 
 313              		.loc 1 116 21 view .LVU78
 314 0028 034B     		ldr	r3, .L13+4
ARM GAS  /tmp/ccMv8ptN.s 			page 11


 315 002a 1860     		str	r0, [r3]
 123:Src/main.c    ****  
 316              		.loc 1 123 3 is_stmt 1 view .LVU79
 317 002c FFF7FEFF 		bl	osKernelStart
 318              	.LVL11:
 319              	.L11:
 129:Src/main.c    ****   {
 320              		.loc 1 129 3 discriminator 1 view .LVU80
 134:Src/main.c    ****   /* USER CODE END 3 */
 321              		.loc 1 134 3 discriminator 1 view .LVU81
 129:Src/main.c    ****   {
 322              		.loc 1 129 9 discriminator 1 view .LVU82
 323 0030 FEE7     		b	.L11
 324              	.L14:
 325 0032 00BF     		.align	2
 326              	.L13:
 327 0034 00000000 		.word	.LANCHOR0
 328 0038 00000000 		.word	defaultTaskHandle
 329              		.cfi_endproc
 330              	.LFE70:
 332              		.section	.text.Error_Handler,"ax",%progbits
 333              		.align	1
 334              		.global	Error_Handler
 335              		.syntax unified
 336              		.thumb
 337              		.thumb_func
 338              		.fpu softvfp
 340              	Error_Handler:
 341              	.LFB74:
 219:Src/main.c    ****   }
 220:Src/main.c    ****   /* USER CODE END 5 */ 
 221:Src/main.c    **** }
 222:Src/main.c    **** 
 223:Src/main.c    **** /**
 224:Src/main.c    ****   * @brief  This function is executed in case of error occurrence.
 225:Src/main.c    ****   * @retval None
 226:Src/main.c    ****   */
 227:Src/main.c    **** void Error_Handler(void)
 228:Src/main.c    **** {
 342              		.loc 1 228 1 view -0
 343              		.cfi_startproc
 344              		@ args = 0, pretend = 0, frame = 0
 345              		@ frame_needed = 0, uses_anonymous_args = 0
 346              		@ link register save eliminated.
 229:Src/main.c    ****   /* USER CODE BEGIN Error_Handler_Debug */
 230:Src/main.c    ****   /* User can add his own implementation to report the HAL error return state */
 231:Src/main.c    **** 
 232:Src/main.c    ****   /* USER CODE END Error_Handler_Debug */
 233:Src/main.c    **** }
 347              		.loc 1 233 1 view .LVU84
 348 0000 7047     		bx	lr
 349              		.cfi_endproc
 350              	.LFE74:
 352              		.comm	defaultTaskHandle,4,4
 353              		.section	.rodata
 354              		.align	2
 355              		.set	.LANCHOR0,. + 0
ARM GAS  /tmp/ccMv8ptN.s 			page 12


 356              	.LC2:
 357 0000 00000000 		.word	.LC0
 358 0004 00000000 		.word	StartDefaultTask
 359 0008 0000     		.short	0
 360 000a 0000     		.space	2
 361 000c 00000000 		.word	0
 362 0010 80000000 		.word	128
 363 0014 00000000 		.word	0
 364 0018 00000000 		.word	0
 365              		.text
 366              	.Letext0:
 367              		.file 2 "/opt/arm-none-eabi/gcc-arm-none-eabi-9-2019-q4-major/arm-none-eabi/include/machine/_defau
 368              		.file 3 "/opt/arm-none-eabi/gcc-arm-none-eabi-9-2019-q4-major/arm-none-eabi/include/sys/_stdint.h"
 369              		.file 4 "Drivers/CMSIS/Include/core_cm3.h"
 370              		.file 5 "Drivers/CMSIS/Device/ST/STM32F1xx/Include/system_stm32f1xx.h"
 371              		.file 6 "Drivers/CMSIS/Device/ST/STM32F1xx/Include/stm32f103xb.h"
 372              		.file 7 "Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_hal_rcc.h"
 373              		.file 8 "Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_hal_rcc_ex.h"
 374              		.file 9 "Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_hal_gpio.h"
 375              		.file 10 "Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_hal_def.h"
 376              		.file 11 "Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_hal.h"
 377              		.file 12 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h"
 378              		.file 13 "Middlewares/Third_Party/FreeRTOS/Source/include/FreeRTOS.h"
 379              		.file 14 "Middlewares/Third_Party/FreeRTOS/Source/include/task.h"
 380              		.file 15 "Middlewares/Third_Party/FreeRTOS/Source/CMSIS_RTOS/cmsis_os.h"
ARM GAS  /tmp/ccMv8ptN.s 			page 13


DEFINED SYMBOLS
                            *ABS*:0000000000000000 main.c
     /tmp/ccMv8ptN.s:13     .rodata.str1.4:0000000000000000 $d
     /tmp/ccMv8ptN.s:20     .text.MX_GPIO_Init:0000000000000000 $t
     /tmp/ccMv8ptN.s:27     .text.MX_GPIO_Init:0000000000000000 MX_GPIO_Init
     /tmp/ccMv8ptN.s:132    .text.MX_GPIO_Init:0000000000000070 $d
     /tmp/ccMv8ptN.s:138    .text.StartDefaultTask:0000000000000000 $t
     /tmp/ccMv8ptN.s:145    .text.StartDefaultTask:0000000000000000 StartDefaultTask
     /tmp/ccMv8ptN.s:172    .text.SystemClock_Config:0000000000000000 $t
     /tmp/ccMv8ptN.s:179    .text.SystemClock_Config:0000000000000000 SystemClock_Config
     /tmp/ccMv8ptN.s:270    .text.main:0000000000000000 $t
     /tmp/ccMv8ptN.s:277    .text.main:0000000000000000 main
     /tmp/ccMv8ptN.s:327    .text.main:0000000000000034 $d
                            *COM*:0000000000000004 defaultTaskHandle
     /tmp/ccMv8ptN.s:333    .text.Error_Handler:0000000000000000 $t
     /tmp/ccMv8ptN.s:340    .text.Error_Handler:0000000000000000 Error_Handler
     /tmp/ccMv8ptN.s:354    .rodata:0000000000000000 $d

UNDEFINED SYMBOLS
HAL_GPIO_WritePin
HAL_GPIO_Init
osDelay
HAL_RCC_OscConfig
HAL_RCC_ClockConfig
HAL_Init
osThreadCreate
osKernelStart
